# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import remote_worker_pb2 as remote__worker__pb2


class RemoteWorkerStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CommandLine = channel.unary_stream(
                '/remote_worker.RemoteWorker/CommandLine',
                request_serializer=remote__worker__pb2.CommandLineRequest.SerializeToString,
                response_deserializer=remote__worker__pb2.CommandLineReply.FromString,
                )


class RemoteWorkerServicer(object):
    """The greeting service definition.
    """

    def CommandLine(self, request, context):
        """Execute a commandline instruction remotely
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RemoteWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CommandLine': grpc.unary_stream_rpc_method_handler(
                    servicer.CommandLine,
                    request_deserializer=remote__worker__pb2.CommandLineRequest.FromString,
                    response_serializer=remote__worker__pb2.CommandLineReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'remote_worker.RemoteWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RemoteWorker(object):
    """The greeting service definition.
    """

    @staticmethod
    def CommandLine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/remote_worker.RemoteWorker/CommandLine',
            remote__worker__pb2.CommandLineRequest.SerializeToString,
            remote__worker__pb2.CommandLineReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
